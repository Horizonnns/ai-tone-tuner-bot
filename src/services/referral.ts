import { prisma } from "../db/client";
import { log } from "../utils/logger";

export async function addReferral(inviterId: string, invitedId: string) {
  try {
    // —Å–æ–∑–¥–∞—ë–º –æ–±–æ–∏—Ö, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
    const inviter = await prisma.user.upsert({
      where: { telegramId: inviterId },
      update: {},
      create: { telegramId: inviterId },
    });

    const invited = await prisma.user.upsert({
      where: { telegramId: invitedId },
      update: {},
      create: { telegramId: invitedId },
    });

    // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –ø—Ä–∏–≥–ª–∞—à—ë–Ω
    const existing = await prisma.referral.findFirst({
      where: { inviterId, invitedId },
    });
    if (existing) return;

    // —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    await prisma.referral.create({ data: { inviterId, invitedId } });

    // –¥–æ–±–∞–≤–ª—è–µ–º +2 –ø–æ–ø—ã—Ç–∫–∏
    await prisma.user.update({
      where: { telegramId: inviterId },
      data: { dailyLimit: { increment: 2 } },
    });

    log(`üéÅ Referral: ${inviterId} –ø—Ä–∏–≥–ª–∞—Å–∏–ª ${invitedId} (+2 –ø–æ–ø—ã—Ç–∫–∏)`);
  } catch (err: any) {
    log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: ${err.message}`);
  }
}

export function generateReferralLink(telegramId: string) {
  const botUsername = process.env.BOT_USERNAME;
  return `https://t.me/${botUsername}?start=${telegramId}`;
}
