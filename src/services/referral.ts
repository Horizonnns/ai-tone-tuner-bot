import { prisma } from "../db/client";
import { log } from "../utils/logger";

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç +2 –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
 * @returns true –µ—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª –±—ã–ª —Å–æ–∑–¥–∞–Ω, false –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª
 */
export async function addReferral(
  inviterId: string,
  invitedId: string
): Promise<boolean> {
  try {
    // —Å–æ–∑–¥–∞—ë–º –æ–±–æ–∏—Ö, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
    const inviter = await prisma.user.upsert({
      where: { telegramId: inviterId },
      update: {},
      create: { telegramId: inviterId },
    });

    const invited = await prisma.user.upsert({
      where: { telegramId: invitedId },
      update: {},
      create: { telegramId: invitedId },
    });

    // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –ø—Ä–∏–≥–ª–∞—à—ë–Ω
    const existing = await prisma.referral.findFirst({ where: { inviterId, invitedId } });

    if (existing) {
      log(`‚ö†Ô∏è Referral —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${inviterId} ‚Üí ${invitedId}`);
      return false;
    }

    // —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    await prisma.referral.create({ data: { inviterId, invitedId } });

    // –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ª–∏–º–∏—Ç: –±–∞–∑–æ–≤—ã–π (5) + —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
    const totalReferrals = await prisma.referral.count({ where: { inviterId } });
    const maxAllowedLimit = 5 + totalReferrals * 2;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const currentLimit = inviter.dailyLimit;

    // –î–æ–±–∞–≤–ª—è–µ–º +2 –ø–æ–ø—ã—Ç–∫–∏, –Ω–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç
    const newLimit = Math.min(currentLimit + 2, maxAllowedLimit);
    const actualIncrement = newLimit - currentLimit;

    if (actualIncrement > 0) {
      await prisma.user.update({
        where: { telegramId: inviterId },
        data: { dailyLimit: newLimit },
      });

      log(
        `üéÅ Referral: ${inviterId} –ø—Ä–∏–≥–ª–∞—Å–∏–ª ${invitedId} (+${actualIncrement} –ø–æ–ø—ã—Ç–æ–∫, –ª–∏–º–∏—Ç: ${newLimit}/${maxAllowedLimit})`
      );
    } else {
      log(
        `‚ö†Ô∏è Referral: ${inviterId} –ø—Ä–∏–≥–ª–∞—Å–∏–ª ${invitedId}, –Ω–æ –ª–∏–º–∏—Ç —É–∂–µ –Ω–∞ –º–∞–∫—Å–∏–º—É–º–µ (${currentLimit}/${maxAllowedLimit})`
      );
    }

    return true;
  } catch (err: any) {
    log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: ${err.message}`);
    return false;
  }
}

export function generateReferralLink(telegramId: string) {
  const botUsername = process.env.BOT_USERNAME;
  return `https://t.me/${botUsername}?start=${telegramId}`;
}
