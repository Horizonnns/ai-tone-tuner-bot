import cron from "node-cron";
import { prisma } from "../db/client";
import { log, logError } from "../utils/logger";

// –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TEST_CRON_INTERVAL
// –ù–∞–ø—Ä–∏–º–µ—Ä: TEST_CRON_INTERVAL="*/1 * * * *" –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
const cronSchedule = process.env.TEST_CRON_INTERVAL || "0 0 * * *";

async function resetDailyLimit() {
  const startTime = new Date();
  try {
    log(`üîÑ –ù–∞—á–∞–ª–æ —Å–±—Ä–æ—Å–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ (${startTime.toISOString()})`);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await prisma.user.findMany();

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—á–∏—Ç–∞–µ–º –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã
    for (const user of users) {
      if (!user.telegramId) continue;

      const referralsCount = await prisma.referral.count({
        where: { inviterId: user.telegramId },
      });
      const newLimit = 5 + referralsCount * 2;

      await prisma.user.update({
        where: { id: user.id },
        data: { dailyLimit: newLimit },
      });
    }

    const endTime = new Date();
    const duration = endTime.getTime() - startTime.getTime();

    log(
      `‚úÖ –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ` +
        `(–∑–∞ ${duration}–º—Å)`
    );
  } catch (error) {
    logError(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ª–∏–º–∏—Ç–æ–≤: ${error}`);
  }
}

// –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00 –ø–æ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (–∏–ª–∏ –ø–æ TEST_CRON_INTERVAL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
cron.schedule(cronSchedule, resetDailyLimit, { timezone: "Europe/Moscow" });

export function initScheduler() {
  const isTestMode = !!process.env.TEST_CRON_INTERVAL;
  const mode = isTestMode
    ? `–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú (${cronSchedule})`
    : "–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å dailyLimit";
  log(`üïê –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω: ${mode}`);

  // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É
  if (isTestMode) {
    log("üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...");
    setTimeout(() => {
      resetDailyLimit();
    }, 5000);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export { resetDailyLimit };
