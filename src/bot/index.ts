import { Telegraf, Markup } from "telegraf";
import axios from "axios";
import dotenv from "dotenv";
import { log } from "../utils/logger";
dotenv.config();

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN!);
const API_URL = process.env.API_URL || "http://localhost:4000/api/rewrite";

// –ü—Ä–æ—Å—Ç–∞—è –ø–∞–º—è—Ç—å –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
const userMessages = new Map<number, string>();

// üëã /start
bot.start(async (ctx) => {
  await ctx.replyWithMarkdownV2(
    `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}\\! üëã
–Ø *AI Tone Writer* ‚Äî —Ç–≤–æ–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\\. üí´
–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å ‚Äî –∏ —è —Å–¥–µ–ª–∞—é –µ–≥–æ –∑–≤—É—á–Ω—ã–º\\!
–ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
_"–ù—É–∂–µ–Ω React\\-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"_`
  );
  log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞`);
});

// üí¨ –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–µ–∫—Å—Ç
bot.on("text", async (ctx) => {
  const text = ctx.message.text;
  userMessages.set(ctx.from.id, text);

  await ctx.reply(
    "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å:",
    Markup.inlineKeyboard([
      [Markup.button.callback("üíº –î–µ–ª–æ–≤–æ–π", "tone_business")],
      [Markup.button.callback("üí¨ –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "tone_friendly")],
      [Markup.button.callback("üöÄ –•–∞–π–ø–æ–≤—ã–π", "tone_hype")],
      [Markup.button.callback("‚ú® –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π", "tone_inspire")],
    ])
  );
});

// ‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
bot.action(/tone_(.+)/, async (ctx) => {
  const tone = ctx.match[1];
  const userId = ctx.from.id;
  const originalText = userMessages.get(userId);

  // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
  try {
    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
  } catch {}

  if (!originalText) {
    await ctx.reply("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Å–Ω–∞—á–∞–ª–∞ üôÇ");
    return;
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å ‚Äú–ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é...‚Äù
  const thinkingMsg = await ctx.reply("‚ú® –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é...");
  await ctx.telegram.sendChatAction(ctx.chat.id, "typing");

  try {
    const response = await axios.post(API_URL, {
      text: originalText,
      tone,
      telegramId: String(userId),
    });

    if (
      response.status === 403 ||
      response.data?.message?.includes("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç")
    ) {
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        thinkingMsg.message_id,
        undefined,
        "üî• –¢—ã –≤—ã–∂–∞–ª –º–∞–∫—Å–∏–º—É–º –∏–∑ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞. –ó–∞–≤—Ç—Ä–∞ ‚Äî –Ω–æ–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è! üí™\n\n" +
          "üíé –•–æ—á–µ—à—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π? –ü–æ–¥–ø–∏—Å–∫–∞ AI Tone Writer Premium ‚Äî —Å–∫–æ—Ä–æ!"
      );
      log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ (403).`);
      return;
    }

    const result = response.data.result;
    const usageCount = response.data.usageCount ?? "?";

    await ctx.telegram.editMessageText(
      ctx.chat.id,
      thinkingMsg.message_id,
      undefined,
      `‚ú® –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é... (${usageCount}/5 –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è)\n\n` +
        `–í–æ—Ç —Ç–≤–æ–π —Ç–µ–∫—Å—Ç –≤ —Å—Ç–∏–ª–µ *${toneLabel(tone)}*:\n\n${result}`,
      { parse_mode: "Markdown" }
    );

    log(`User ${userId} rewrote text in ${tone} tone (${usageCount}/5)`);

    userMessages.delete(userId);
  } catch (err: any) {
    console.error(err);

    // –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å–ª–∞–ª 403, –æ—Ç—Ä–∞–∑–∏–º –∫—Ä–∞—Å–∏–≤–æ
    if (
      err.response?.status === 403 &&
      err.response?.data?.message?.includes("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç")
    ) {
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        thinkingMsg.message_id,
        undefined,
        "üî• –¢—ã –≤—ã–∂–∞–ª –º–∞–∫—Å–∏–º—É–º –∏–∑ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞. –ó–∞–≤—Ç—Ä–∞ ‚Äî –Ω–æ–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è! üí™"
      );
      log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ (catch)`);
      return;
    }

    // –∏–Ω–∞—á–µ ‚Äî –æ–±—â–∞—è –æ—à–∏–±–∫–∞
    await ctx.telegram.editMessageText(
      ctx.chat.id,
      thinkingMsg.message_id,
      undefined,
      "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ!"
    );
  }

  // try {
  //   // –ó–∞–ø—Ä–æ—Å –∫ API
  //   const response = await axios.post(API_URL, {
  //     text: originalText,
  //     tone,
  //     telegramId: String(userId),
  //   });

  //   if (response.data?.error) {
  //     throw new Error(response.data.error);
  //   }

  //   if (response.data?.message?.includes("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç")) {
  //     await ctx.telegram.editMessageText(
  //       ctx.chat.id,
  //       thinkingMsg.message_id,
  //       undefined,
  //       "üî• –¢—ã –≤—ã–∂–∞–ª –º–∞–∫—Å–∏–º—É–º –∏–∑ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞. –ó–∞–≤—Ç—Ä–∞ ‚Äî –Ω–æ–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è! üí™\n\n" +
  //         "üíé –•–æ—á–µ—à—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π? –ü–æ–¥–ø–∏—Å–∫–∞ AI Tone Writer Premium ‚Äî —Å–∫–æ—Ä–æ!"
  //     );
  //     log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞.`);
  //     return;
  //   }

  //   const result = response.data.result;
  //   const usageCount = response.data.usageCount ?? "?";

  //   await ctx.telegram.editMessageText(
  //     ctx.chat.id,
  //     thinkingMsg.message_id,
  //     undefined,
  //     `‚ú® –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é... (${usageCount}/5 –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è)\n\n` +
  //       `–í–æ—Ç —Ç–≤–æ–π —Ç–µ–∫—Å—Ç –≤ —Å—Ç–∏–ª–µ *${toneLabel(tone)}*:\n\n${result}`,
  //     { parse_mode: "Markdown" }
  //   );

  //   log(`User ${userId} rewrote text in ${tone} tone (${usageCount}/5)`);

  //   userMessages.delete(userId);
  // } catch (err: any) {
  //   console.error(err);
  //   await ctx.telegram.editMessageText(
  //     ctx.chat.id,
  //     thinkingMsg.message_id,
  //     undefined,
  //     "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ!"
  //   );
  // }
});

// üé® –°–ª–æ–≤–∞—Ä—å —Å—Ç–∏–ª–µ–π
function toneLabel(key: string) {
  const map: Record<string, string> = {
    business: "üíº –¥–µ–ª–æ–≤–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å",
    friendly: "üí¨ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ª—ë–≥–∫–∏–π —Ç–æ–Ω",
    hype: "üöÄ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ —Ö–∞–π–ø–æ–≤—ã–π —Å—Ç–∏–ª—å",
    inspire: "‚ú® –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Å—Ç–∏–ª—å",
  };
  return map[key] || key;
}

// üöÄ –ó–∞–ø—É—Å–∫
bot.launch();
console.log("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
log("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω");
