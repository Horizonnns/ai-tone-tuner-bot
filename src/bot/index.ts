import { Telegraf, Markup } from "telegraf";
import axios from "axios";
import dotenv from "dotenv";
import { log, logError } from "../utils/logger";
import { setupInline } from "./inline";

import { addReferral, generateReferralLink } from "../services/referral";
import { prisma } from "../db/client";

dotenv.config();
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN!);
const BACKEND_URL = process.env.BACKEND_URL;

setupInline(bot);

// üíé –ö–æ–º–∞–Ω–¥–∞ /premium ‚Äî —Ç–µ–ø–µ—Ä—å —Å –æ–ø–ª–∞—Ç–æ–π
bot.command("premium", async (ctx) => {
  const url = `${process.env.BACKEND_URL}/api/payments/create?telegramId=${ctx.from.id}`;

  await ctx.reply(
    "üíé –•–æ—á–µ—à—å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Å—Ç–∏–ª–∏?\n\n" +
      "üëâ –ü–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç –∏ –ø–æ–ª—É—á–∏ *AI Tone Writer Premium* –Ω–∞ 30 –¥–Ω–µ–π.\n\n" +
      "–°—Ç–æ–∏–º–æ—Å—Ç—å: *199‚ÇΩ* üí∞",
    { reply_markup: { inline_keyboard: [[{ text: "üí≥ –ö—É–ø–∏—Ç—å Premium ‚Äî 199‚ÇΩ", url }]] } }
  );
});

// –ü—Ä–æ—Å—Ç–∞—è –ø–∞–º—è—Ç—å –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
const userMessages = new Map<number, string>();

// üß© –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —é–∑–µ—Ä–∞
async function getUser(telegramId: string) {
  let user = await prisma.user.findUnique({ where: { telegramId } });
  if (!user) {
    user = await prisma.user.create({ data: { telegramId } });
    log(`–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${telegramId}`);
  }
  return user;
}

// üëã /start
bot.start(async (ctx) => {
  const args = ctx.message.text.split(" ");
  const inviterId = args[1];
  const userId = ctx.from.id.toString();

  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await getUser(userId);

  // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
  if (inviterId && inviterId !== userId) {
    await getUser(inviterId);
    await addReferral(inviterId, userId);

    const inviter = await prisma.user.findUnique({ where: { telegramId: inviterId } });
    if (inviter) {
      await bot.telegram.sendMessage(
        inviterId,
        `üéâ –¢–≤–æ–π –¥—Ä—É–≥ ${ctx.from.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ!\n–¢—ã –ø–æ–ª—É—á–∏–ª +2 –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üí™`
      );
    }
  }

  const link = generateReferralLink(userId);

  await ctx.reply(
    `üëã –ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}!\n\n` +
      `–ü–æ–¥–µ–ª–∏—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∏ +2 –ø–æ–ø—ã—Ç–∫–∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ: ${link}`
  );

  await ctx.replyWithMarkdownV2(
    `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}\\! üëã
–Ø *AI Tone Writer* ‚Äî —Ç–≤–æ–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\\. üí´
–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å ‚Äî –∏ —è —Å–¥–µ–ª–∞—é –µ–≥–æ –∑–≤—É—á–Ω—ã–º\\!
–ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
_"–ù—É–∂–µ–Ω React\\-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"_`
  );

  log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞`);
});

// üí¨ –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–µ–∫—Å—Ç
bot.on("text", async (ctx) => {
  const text = ctx.message.text;
  userMessages.set(ctx.from.id, text);

  await ctx.reply(
    "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å:",
    Markup.inlineKeyboard([
      [Markup.button.callback("üíº –î–µ–ª–æ–≤–æ–π", "tone_business")],
      [Markup.button.callback("üí¨ –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "tone_friendly")],
      [Markup.button.callback("üöÄ –•–∞–π–ø–æ–≤—ã–π", "tone_hype")],
      [Markup.button.callback("‚ú® –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π", "tone_inspire")],
    ])
  );
});

// ‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
bot.action(/tone_(.+)/, async (ctx) => {
  const tone = ctx.match[1];
  const userId = ctx.from.id;
  const originalText = userMessages.get(userId);

  try {
    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
  } catch {}

  if (!originalText) {
    await ctx.reply("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Å–Ω–∞—á–∞–ª–∞ üôÇ");
    return;
  }

  const thinkingMsg = await ctx.reply("‚ú® –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é...");
  await ctx.telegram.sendChatAction(ctx.chat.id, "typing");

  try {
    const response = await axios.post(`${BACKEND_URL}/rewrite`, {
      text: originalText,
      tone,
      telegramId: String(userId),
    });

    const { result, remaining, initialLimit, isPremium, message } = response.data;

    if (response.status === 403 || message?.includes("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç")) {
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        thinkingMsg.message_id,
        undefined,
        "üî• –¢—ã –≤—ã–∂–∞–ª –º–∞–∫—Å–∏–º—É–º –∏–∑ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞. –ó–∞–≤—Ç—Ä–∞ ‚Äî –Ω–æ–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è! üí™\n\n" +
          "üíé –•–æ—á–µ—à—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π? –ü–æ–¥–ø–∏—Å–∫–∞ AI Tone Writer Premium ‚Äî —Å–∫–æ—Ä–æ!"
      );
      log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ (403)`);
      return;
    }

    let prefixMsg = "‚ú® –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é...";
    if (!isPremium && remaining !== "‚àû") {
      const totalLimit = initialLimit !== undefined ? initialLimit : 5;
      const used = totalLimit - remaining;
      prefixMsg += ` (${used}/${totalLimit} –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è)`;
    }

    await ctx.telegram.editMessageText(
      ctx.chat.id,
      thinkingMsg.message_id,
      undefined,
      `${prefixMsg}\n\n–í–æ—Ç —Ç–≤–æ–π —Ç–µ–∫—Å—Ç –≤ —Å—Ç–∏–ª–µ *${toneLabel(tone)}*:\n\n${result}`,
      { parse_mode: "Markdown" }
    );

    const totalLimit = initialLimit !== undefined ? initialLimit : 5;
    const used = remaining !== "‚àû" ? totalLimit - remaining : 0;
    log(`User ${userId} rewrote text in ${tone} tone (${used}/${totalLimit})`);
    userMessages.delete(userId);
  } catch (err: any) {
    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–∏: ${err.message}`);
    if (err.response?.status === 403) {
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        thinkingMsg.message_id,
        undefined,
        "üî• –¢—ã –≤—ã–∂–∞–ª –º–∞–∫—Å–∏–º—É–º –∏–∑ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞. –ó–∞–≤—Ç—Ä–∞ ‚Äî –Ω–æ–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è! üí™"
      );
      return;
    }

    await ctx.telegram.editMessageText(
      ctx.chat.id,
      thinkingMsg.message_id,
      undefined,
      "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ!"
    );
  }
});

// üé® –°–ª–æ–≤–∞—Ä—å —Å—Ç–∏–ª–µ–π
function toneLabel(key: string) {
  const map: Record<string, string> = {
    business: "üíº –¥–µ–ª–æ–≤–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å",
    friendly: "üí¨ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ª—ë–≥–∫–∏–π —Ç–æ–Ω",
    hype: "üöÄ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ —Ö–∞–π–ø–æ–≤—ã–π —Å—Ç–∏–ª—å",
    inspire: "‚ú® –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Å—Ç–∏–ª—å",
  };
  return map[key] || key;
}

// üöÄ –ó–∞–ø—É—Å–∫
bot.launch();
console.log("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
log("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω");
