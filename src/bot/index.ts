import { Telegraf, Markup } from "telegraf";
import OpenAI from "openai";
import dotenv from "dotenv";
dotenv.config();

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN!);
const openai = new OpenAI({ apiKey: process.env.OPENAI_KEY });

// –ü—Ä–æ—Å—Ç–∞—è –ø–∞–º—è—Ç—å: userId -> lastMessage
const userMessages = new Map<number, string>();

// üß† –ù–æ–≤–æ–µ: –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userLimits = new Map<number, { count: number; lastDate: string }>();

// üëã /start
bot.start((ctx) => {
  ctx.replyWithMarkdownV2(
    `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}\\! üëã
–Ø *AI Tone Writer* ‚Äî —Ç–≤–æ–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\\. üí´
–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å ‚Äî –∏ —è —Å–¥–µ–ª–∞—é –µ–≥–æ –∑–≤—É—á–Ω—ã–º\\!
–ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
_"–ù—É–∂–µ–Ω React\\-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"_`
  );
});

// üí¨ –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
bot.on("text", async (ctx) => {
  const text = ctx.message.text;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
  userMessages.set(ctx.from.id, text);

  ctx.reply(
    "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å:",
    Markup.inlineKeyboard([
      [Markup.button.callback("üíº –î–µ–ª–æ–≤–æ–π", "tone_business")],
      [Markup.button.callback("üí¨ –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "tone_friendly")],
      [Markup.button.callback("üöÄ –•–∞–π–ø–æ–≤—ã–π", "tone_hype")],
      [Markup.button.callback("‚ú® –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π", "tone_inspire")],
    ])
  );

  (ctx as any).session = { text };
});

// ‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
bot.action(/tone_(.+)/, async (ctx) => {
  const tone = ctx.match[1];
  const userId = ctx.from.id;
  const today = new Date().toISOString().slice(0, 10);
  const userLimit = userLimits.get(userId);

  // üß© –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –î–û —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  const isLimited =
    userLimit && userLimit.lastDate === today && userLimit.count >= 5;

  // –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ)
  try {
    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
  } catch {}

  const originalText = userMessages.get(userId);
  if (!originalText) {
    await ctx.reply("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Å–Ω–∞—á–∞–ª–∞ üôÇ");
    return;
  }

  // üí´ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º "–ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é..."
  const thinkingMsg = await ctx.reply("‚ú® –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é...");
  await ctx.telegram.sendChatAction(ctx.chat.id, "typing");

  // üöß –ï—Å–ª–∏ –ª–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  if (isLimited) {
    await ctx.telegram.editMessageText(
      ctx.chat.id,
      thinkingMsg.message_id,
      undefined,
      "üòÖ –¢—ã –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –≤ 5 –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n\n" +
        "–•–æ—á–µ—à—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π? üíé –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞ AI Tone Writer Premium!"
    );
    return;
  }

  // üìä –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Å—á—ë—Ç—á–∏–∫
  if (!userLimit || userLimit.lastDate !== today) {
    userLimits.set(userId, { count: 1, lastDate: today });
  } else {
    userLimit.count += 1;
    userLimits.set(userId, userLimit);
  }

  const toneMap: Record<string, string> = {
    business: "–¥–µ–ª–æ–≤–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å",
    friendly: "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ª—ë–≥–∫–∏–π —Ç–æ–Ω",
    hype: "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ —Ö–∞–π–ø–æ–≤—ã–π —Å—Ç–∏–ª—å",
    inspire: "–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π",
  };

  // üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
  const completion = await openai.chat.completions.create({
    model: "gpt-4o-mini",
    messages: [
      {
        role: "system",
        content: `–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ç–æ–Ω–µ.`,
      },
      {
        role: "user",
        content: `–ü–µ—Ä–µ–ø–∏—à–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –≤ ${toneMap[tone]}:\n\n${originalText}`,
      },
    ],
  });

  const result =
    completion.choices[0].message?.content || "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòÖ";

  // ‚úèÔ∏è –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äú–ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é...‚Äù –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  await ctx.telegram.editMessageText(
    ctx.chat.id,
    thinkingMsg.message_id,
    undefined,
    `–í–æ—Ç —Ç–≤–æ–π —Ç–µ–∫—Å—Ç –≤ —Å—Ç–∏–ª–µ *${toneMap[tone]}*:\n\n${result}`,
    { parse_mode: "Markdown" }
  );

  userMessages.delete(userId);
});

// üöÄ –ó–∞–ø—É—Å–∫
bot.launch();
console.log("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
