import express from "express";
import { rewriteText } from "../services/openai";
import { prisma } from "../db/client";
import { getOrCreateUser } from "../services/user";

export const router = express.Router();

router.post("/rewrite", async (req, res) => {
  try {
    const { text, tone, telegramId } = req.body;

    if (!text || !tone || !telegramId) {
      return res.status(400).json({ error: "Missing required fields" });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await getOrCreateUser(telegramId);

    // üíé Premium ‚Äî –±–µ–∑–ª–∏–º–∏—Ç
    if (user.isPremium) {
      const rewritten = await rewriteText(text, tone);
      return res.json({
        result: rewritten,
        remaining: "‚àû",
        isPremium: true,
        message: "Premium user ‚Äî no limits",
      });
    }

    // üßÆ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ø—ã—Ç–∫–∏
    if (user.dailyLimit <= 0) {
      return res.status(403).json({ message: "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è" });
    }

    // ‚úçÔ∏è –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    const rewritten = await rewriteText(text, tone);

    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –æ–±—â–∏–π –ª–∏–º–∏—Ç: –±–∞–∑–æ–≤—ã–π (5) + —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
    // –°—á–∏—Ç–∞–µ–º –≤—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ
    const referralsCount = await prisma.referral.count({
      where: { inviterId: telegramId },
    });
    const totalLimit = 5 + referralsCount * 2;

    // üîª –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç –Ω–∞ 1
    const updatedUser = await prisma.user.update({
      where: { telegramId },
      data: { dailyLimit: { decrement: 1 }, lastUsedAt: new Date() },
    });

    return res.json({
      result: rewritten,
      remaining: updatedUser.dailyLimit,
      initialLimit: totalLimit,
      isPremium: false,
      message: `–û—Å—Ç–∞–ª–æ—Å—å ${updatedUser.dailyLimit} –ø–æ–ø—ã—Ç–æ–∫`,
    });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ /rewrite:", err);
    return res.status(500).json({ error: "Internal Server Error" });
  }
});
